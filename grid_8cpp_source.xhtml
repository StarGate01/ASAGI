<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>ASAGI: grid/grid.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  <td id="projectlogo"><img alt="Logo" src="asagi.png"/></td>
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">ASAGI
   &#160;<span id="projectnumber">0.3</span>
   </div>
   <div id="projectbrief">a pArallel Server for Adaptive GeoInformation</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">grid/grid.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="grid_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="grid_8h.xhtml">grid.h</a>&quot;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="constants_8h.xhtml">constants.h</a>&quot;</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="preprocessor">#ifdef PNG_ENABLED</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="pngwriter_8h.xhtml">io/pngwriter.h</a>&quot;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#endif</span>
<a name="l00045"></a>00045 <span class="preprocessor"></span>
<a name="l00046"></a>00046 <span class="preprocessor">#include &quot;<a class="code" href="basictype_8h.xhtml">types/basictype.h</a>&quot;</span>
<a name="l00047"></a>00047 
<a name="l00048"></a>00048 <span class="preprocessor">#include &lt;cstdlib&gt;</span>
<a name="l00049"></a>00049 <span class="preprocessor">#include &lt;cmath&gt;</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &lt;limits&gt;</span>
<a name="l00051"></a>00051 
<a name="l00056"></a><a class="code" href="classgrid_1_1Grid.xhtml#ab5c9090001b89f37ce38217d08ce6b9c">00056</a> <a class="code" href="classgrid_1_1Grid.xhtml#ab5c9090001b89f37ce38217d08ce6b9c">grid::Grid::Grid</a>(<span class="keyword">const</span> <a class="code" href="classgrid_1_1GridContainer.xhtml">GridContainer</a> &amp;container,
<a name="l00057"></a>00057         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> hint)
<a name="l00058"></a>00058         : m_container(container), m_variableName(<span class="stringliteral">&quot;z&quot;</span>)
<a name="l00059"></a>00059 {
<a name="l00060"></a>00060         <a class="code" href="classgrid_1_1Grid.xhtml#a17a468f26e0fda7eec223a2e83df528b">m_inputFile</a> = 0L;
<a name="l00061"></a>00061         
<a name="l00062"></a>00062         <a class="code" href="classgrid_1_1Grid.xhtml#ae8de9c7cff9a920effa6009fc0522fbc">m_blockSize</a>[0] = <a class="code" href="classgrid_1_1Grid.xhtml#ae8de9c7cff9a920effa6009fc0522fbc">m_blockSize</a>[1] = <a class="code" href="classgrid_1_1Grid.xhtml#ae8de9c7cff9a920effa6009fc0522fbc">m_blockSize</a>[2] = 0;
<a name="l00063"></a>00063         
<a name="l00064"></a>00064         <a class="code" href="classgrid_1_1Grid.xhtml#a6d849c0cc8a9d97809e8199d01ecadc4">m_blocksPerNode</a> = -1;
<a name="l00065"></a>00065         
<a name="l00066"></a>00066         <a class="code" href="classgrid_1_1Grid.xhtml#a66825e47748b0ad6140983626cff0ef0">m_handSpread</a> = -1;
<a name="l00067"></a>00067 
<a name="l00068"></a>00068         <span class="keywordflow">if</span> (hint &amp; <a class="code" href="classasagi_1_1Grid.xhtml#abc881a38a370c2dae22092dcb08dab05">asagi::Grid::HAS_TIME</a>)
<a name="l00069"></a>00069                 <a class="code" href="classgrid_1_1Grid.xhtml#a2cc6bfcb4497945dfc9c8b17468e0141">m_timeDimension</a> = -1;
<a name="l00070"></a>00070         <span class="keywordflow">else</span>
<a name="l00071"></a>00071                 <a class="code" href="classgrid_1_1Grid.xhtml#a2cc6bfcb4497945dfc9c8b17468e0141">m_timeDimension</a> = -2;
<a name="l00072"></a>00072 }
<a name="l00073"></a>00073 
<a name="l00074"></a>00074 grid::Grid::~Grid()
<a name="l00075"></a>00075 {
<a name="l00076"></a>00076         <span class="keyword">delete</span> m_inputFile;
<a name="l00077"></a>00077 }
<a name="l00078"></a>00078 
<a name="l00091"></a><a class="code" href="classgrid_1_1Grid.xhtml#a6571a0b9df98396274c5f3d2717ebbc2">00091</a> <a class="code" href="group__cxx__interface.xhtml#gac1191f4df7554b1b99e515962ebc2bb5">asagi::Grid::Error</a> <a class="code" href="classgrid_1_1Grid.xhtml#a6571a0b9df98396274c5f3d2717ebbc2">grid::Grid::setParam</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name, <span class="keyword">const</span> <span class="keywordtype">char</span>* value)
<a name="l00092"></a>00092 {
<a name="l00093"></a>00093         <span class="keywordtype">long</span> blockSize;
<a name="l00094"></a>00094         
<a name="l00095"></a>00095         <span class="keywordflow">if</span> (strcmp(name, <span class="stringliteral">&quot;variable-name&quot;</span>) == 0) {
<a name="l00096"></a>00096                 m_variableName = value;
<a name="l00097"></a>00097                 <span class="keywordflow">return</span> <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5a69656f79342520e170ee22f4dfcb6d29">asagi::Grid::SUCCESS</a>;
<a name="l00098"></a>00098         }
<a name="l00099"></a>00099         
<a name="l00100"></a>00100         <span class="keywordflow">if</span> (strcmp(name, <span class="stringliteral">&quot;time-dimension&quot;</span>) == 0) {
<a name="l00101"></a>00101                 <span class="keywordflow">if</span> (m_timeDimension &lt;= -2)
<a name="l00102"></a>00102                         <span class="comment">// HAS_TIME hint was not specified</span>
<a name="l00103"></a>00103                         <span class="comment">//-&gt; ignore this variable</span>
<a name="l00104"></a>00104                         <span class="keywordflow">return</span> <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5a69656f79342520e170ee22f4dfcb6d29">asagi::Grid::SUCCESS</a>;
<a name="l00105"></a>00105                 
<a name="l00106"></a>00106                 <span class="comment">// Value should be x, y or z</span>
<a name="l00107"></a>00107                 <span class="keywordflow">for</span> (<span class="keywordtype">signed</span> <span class="keywordtype">char</span> i = 0; i &lt; 3; i++) {
<a name="l00108"></a>00108                         <span class="keywordflow">if</span> (strcmp(value, <a class="code" href="namespacegrid.xhtml#a3590c3edde2a86e0257dad57f1569274">DIMENSION_NAMES</a>[i]) == 0) {
<a name="l00109"></a>00109                                 m_timeDimension = i;
<a name="l00110"></a>00110                                 <span class="keywordflow">return</span> <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5a69656f79342520e170ee22f4dfcb6d29">asagi::Grid::SUCCESS</a>;
<a name="l00111"></a>00111                         }
<a name="l00112"></a>00112                 }
<a name="l00113"></a>00113                 
<a name="l00114"></a>00114                 <span class="keywordflow">return</span> <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5aff343faffab82831cdc66ce0f8f4b400">asagi::Grid::INVALID_VALUE</a>;
<a name="l00115"></a>00115         }
<a name="l00116"></a>00116         
<a name="l00117"></a>00117         <span class="keywordflow">if</span> (strcmp(&amp;name[1], <span class="stringliteral">&quot;-block-size&quot;</span>) == 0) {
<a name="l00118"></a>00118                 <span class="comment">// Check for [xyz]-block-size</span>
<a name="l00119"></a>00119                 
<a name="l00120"></a>00120                 <span class="keywordflow">for</span> (<span class="keywordtype">signed</span> <span class="keywordtype">char</span> i = 0; i &lt; 3; i++) {
<a name="l00121"></a>00121                         <span class="keywordflow">if</span> (name[0] == <a class="code" href="namespacegrid.xhtml#a3590c3edde2a86e0257dad57f1569274">DIMENSION_NAMES</a>[i][0]) {
<a name="l00122"></a>00122                                 blockSize = atol(value);
<a name="l00123"></a>00123                                 
<a name="l00124"></a>00124                                 <span class="keywordflow">if</span> (blockSize &lt;= 0)
<a name="l00125"></a>00125                                         <span class="keywordflow">return</span> <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5aff343faffab82831cdc66ce0f8f4b400">asagi::Grid::INVALID_VALUE</a>;
<a name="l00126"></a>00126                                 
<a name="l00127"></a>00127                                 m_blockSize[i] = blockSize;
<a name="l00128"></a>00128                                 <span class="keywordflow">return</span> <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5a69656f79342520e170ee22f4dfcb6d29">asagi::Grid::SUCCESS</a>;
<a name="l00129"></a>00129                         }
<a name="l00130"></a>00130                 }
<a name="l00131"></a>00131         }
<a name="l00132"></a>00132         
<a name="l00133"></a>00133         <span class="keywordflow">if</span> (strcmp(name, <span class="stringliteral">&quot;block-cache-size&quot;</span>) == 0) {
<a name="l00134"></a>00134                 m_blocksPerNode = atol(value);
<a name="l00135"></a>00135                 
<a name="l00136"></a>00136                 <span class="keywordflow">if</span> (m_blocksPerNode &lt; 0)
<a name="l00137"></a>00137                         <span class="comment">// We set a correct value later</span>
<a name="l00138"></a>00138                         <span class="keywordflow">return</span> <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5aff343faffab82831cdc66ce0f8f4b400">asagi::Grid::INVALID_VALUE</a>;
<a name="l00139"></a>00139                 
<a name="l00140"></a>00140                 <span class="keywordflow">if</span> ((m_blocksPerNode == 0) &amp;&amp; (getMPISize() &gt; 1))
<a name="l00141"></a>00141                         logWarning() &lt;&lt; <span class="stringliteral">&quot;Empty block cache size may lead to failures!&quot;</span>;
<a name="l00142"></a>00142                 
<a name="l00143"></a>00143                 <span class="keywordflow">return</span> <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5a69656f79342520e170ee22f4dfcb6d29">asagi::Grid::SUCCESS</a>;
<a name="l00144"></a>00144         }
<a name="l00145"></a>00145         
<a name="l00146"></a>00146         <span class="keywordflow">if</span> ((strcmp(name, <span class="stringliteral">&quot;cache-hand-spread&quot;</span>) == 0)
<a name="l00147"></a>00147                 || (strcmp(name, <span class="stringliteral">&quot;cache-hand-difference&quot;</span>) == 0)) { <span class="comment">// Obsolete name</span>
<a name="l00148"></a>00148                 m_handSpread = atol(value);
<a name="l00149"></a>00149                 
<a name="l00150"></a>00150                 <span class="keywordflow">return</span> <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5a69656f79342520e170ee22f4dfcb6d29">asagi::Grid::SUCCESS</a>;
<a name="l00151"></a>00151         }
<a name="l00152"></a>00152         
<a name="l00153"></a>00153         <span class="keywordflow">return</span> <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5a8c22b48a4d2426224c3d9d52001ea693">asagi::Grid::UNKNOWN_PARAM</a>;
<a name="l00154"></a>00154 }
<a name="l00155"></a>00155 
<a name="l00159"></a><a class="code" href="classgrid_1_1Grid.xhtml#a1dcb4441e88b9474b96714b6f3c37015">00159</a> <a class="code" href="group__cxx__interface.xhtml#gac1191f4df7554b1b99e515962ebc2bb5">asagi::Grid::Error</a> <a class="code" href="classgrid_1_1Grid.xhtml#a1dcb4441e88b9474b96714b6f3c37015">grid::Grid::open</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* filename)
<a name="l00160"></a>00160 {
<a name="l00161"></a>00161         <a class="code" href="group__cxx__interface.xhtml#gac1191f4df7554b1b99e515962ebc2bb5">asagi::Grid::Error</a> error;
<a name="l00162"></a>00162         <span class="keywordtype">double</span> scaling[3];
<a name="l00163"></a>00163         
<a name="l00164"></a>00164         <span class="comment">// Open NetCDF file</span>
<a name="l00165"></a>00165         m_inputFile = <span class="keyword">new</span> <a class="code" href="classio_1_1NetCdfReader.xhtml">io::NetCdfReader</a>(filename, getMPIRank());
<a name="l00166"></a>00166         <span class="keywordflow">if</span> ((error = m_inputFile-&gt;open(m_variableName.c_str()))
<a name="l00167"></a>00167                 != <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5a69656f79342520e170ee22f4dfcb6d29">asagi::Grid::SUCCESS</a>)
<a name="l00168"></a>00168                 <span class="keywordflow">return</span> error;
<a name="l00169"></a>00169         
<a name="l00170"></a>00170 <span class="preprocessor">#ifdef __INTEL_COMPILER</span>
<a name="l00171"></a>00171 <span class="preprocessor"></span><span class="preprocessor">        #pragma unroll(3)</span>
<a name="l00172"></a>00172 <span class="preprocessor"></span><span class="preprocessor">#endif // __INTEL_COMPILER</span>
<a name="l00173"></a>00173 <span class="preprocessor"></span>        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> i = 0; i &lt; 3; i++) {
<a name="l00174"></a>00174                 <span class="comment">// Get dimension size</span>
<a name="l00175"></a>00175                 m_dim[i] = m_inputFile-&gt;getSize(i);
<a name="l00176"></a>00176         
<a name="l00177"></a>00177                 <span class="comment">// Get offset and scaling</span>
<a name="l00178"></a>00178                 m_offset[i] = m_inputFile-&gt;getOffset(i);
<a name="l00179"></a>00179         
<a name="l00180"></a>00180                 scaling[i] = m_inputFile-&gt;getScaling(i);
<a name="l00181"></a>00181         }
<a name="l00182"></a>00182 
<a name="l00183"></a>00183         <span class="comment">// Set time dimension</span>
<a name="l00184"></a>00184         <span class="keywordflow">if</span> (m_timeDimension == -1) {
<a name="l00185"></a>00185                 <span class="comment">// Time grid, but time dimension not specified</span>
<a name="l00186"></a>00186                 m_timeDimension = m_inputFile-&gt;getDimensions() - 1;
<a name="l00187"></a>00187                 logDebug(getMPIRank()) &lt;&lt; <span class="stringliteral">&quot;Assuming time dimension&quot;</span>
<a name="l00188"></a>00188                         &lt;&lt; <a class="code" href="namespacegrid.xhtml#a3590c3edde2a86e0257dad57f1569274">DIMENSION_NAMES</a>[m_timeDimension];
<a name="l00189"></a>00189         }
<a name="l00190"></a>00190         
<a name="l00191"></a>00191         <span class="comment">// Set block size in time dimension</span>
<a name="l00192"></a>00192         <span class="keywordflow">if</span> ((m_timeDimension &gt;= 0) &amp;&amp; (m_blockSize[m_timeDimension] == 0)) {
<a name="l00193"></a>00193                 logDebug(getMPIRank()) &lt;&lt; <span class="stringliteral">&quot;Setting block size in time dimension&quot;</span>
<a name="l00194"></a>00194                         &lt;&lt; <a class="code" href="namespacegrid.xhtml#a3590c3edde2a86e0257dad57f1569274">DIMENSION_NAMES</a>[m_timeDimension] &lt;&lt; <span class="stringliteral">&quot;to 1&quot;</span>;
<a name="l00195"></a>00195                 m_blockSize[m_timeDimension] = 1;
<a name="l00196"></a>00196         }
<a name="l00197"></a>00197         
<a name="l00198"></a>00198         <span class="comment">// Set default block size and calculate number of blocks</span>
<a name="l00199"></a>00199 <span class="preprocessor">#ifdef __INTEL_COMPILER</span>
<a name="l00200"></a>00200 <span class="preprocessor"></span><span class="preprocessor">        #pragma unroll(3)</span>
<a name="l00201"></a>00201 <span class="preprocessor"></span><span class="preprocessor">#endif // __INTEL_COMPILER</span>
<a name="l00202"></a>00202 <span class="preprocessor"></span>        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> i = 0; i &lt; 3; i++) {
<a name="l00203"></a>00203                 <span class="keywordflow">if</span> (m_blockSize[i] == 0)
<a name="l00204"></a>00204                         <span class="comment">// Setting default block size, if not yet set</span>
<a name="l00205"></a>00205                         m_blockSize[i] = 50;
<a name="l00206"></a>00206                 
<a name="l00207"></a>00207                 <span class="comment">// A block size large than the dimension does not make any sense</span>
<a name="l00208"></a>00208                 <span class="keywordflow">if</span> (m_dim[i] &lt; m_blockSize[i]) {
<a name="l00209"></a>00209                         logDebug(getMPIRank()) &lt;&lt; <span class="stringliteral">&quot;Shrinking&quot;</span> &lt;&lt; <a class="code" href="namespacegrid.xhtml#a3590c3edde2a86e0257dad57f1569274">DIMENSION_NAMES</a>[i]
<a name="l00210"></a>00210                                 &lt;&lt; <span class="stringliteral">&quot;block size to&quot;</span> &lt;&lt; m_dim[i];
<a name="l00211"></a>00211                         m_blockSize[i] = m_dim[i];
<a name="l00212"></a>00212                 }
<a name="l00213"></a>00213                 
<a name="l00214"></a>00214                 <span class="comment">// Integer way of rounding up</span>
<a name="l00215"></a>00215                 m_blocks[i] = (m_dim[i] + m_blockSize[i] - 1) / m_blockSize[i];
<a name="l00216"></a>00216                 
<a name="l00217"></a>00217                 m_scalingInv[i] = getInvScaling(scaling[i]);
<a name="l00218"></a>00218                 
<a name="l00219"></a>00219                 <span class="comment">// Set min/max</span>
<a name="l00220"></a>00220                 <span class="keywordflow">if</span> (std::isinf(scaling[i])) {
<a name="l00221"></a>00221                         m_min[i] = -std::numeric_limits&lt;double&gt;::infinity();
<a name="l00222"></a>00222                         m_max[i] = std::numeric_limits&lt;double&gt;::infinity();
<a name="l00223"></a>00223                 } <span class="keywordflow">else</span> {
<a name="l00224"></a>00224                         <span class="comment">// Warning: min and max are inverted of scaling is negative</span>
<a name="l00225"></a>00225                         <span class="keywordtype">double</span> min = m_offset[i];
<a name="l00226"></a>00226                         <span class="keywordtype">double</span> max = m_offset[i] + scaling[i] * (m_dim[i] - 1);
<a name="l00227"></a>00227 
<a name="l00228"></a>00228                         <span class="keywordflow">if</span> (m_container.getValuePos()
<a name="l00229"></a>00229                                 == GridContainer::CELL_CENTERED) {
<a name="l00230"></a>00230                                 <span class="comment">// Add half a cell on both ends</span>
<a name="l00231"></a>00231                                 min -= scaling[i] * (0.5 - NUMERIC_PRECISION);
<a name="l00232"></a>00232                                 max += scaling[i] * (0.5 - NUMERIC_PRECISION);
<a name="l00233"></a>00233                         }
<a name="l00234"></a>00234 
<a name="l00235"></a>00235                         m_min[i] = std::min(min, max);
<a name="l00236"></a>00236                         m_max[i] = std::max(min, max);
<a name="l00237"></a>00237                 }
<a name="l00238"></a>00238         }
<a name="l00239"></a>00239         
<a name="l00240"></a>00240         <span class="comment">// Set default cache size</span>
<a name="l00241"></a>00241         <span class="keywordflow">if</span> (m_blocksPerNode &lt; 0)
<a name="l00242"></a>00242                 <span class="comment">// Default value</span>
<a name="l00243"></a>00243                 m_blocksPerNode = 80;
<a name="l00244"></a>00244         
<a name="l00245"></a>00245         <span class="comment">// Init type</span>
<a name="l00246"></a>00246         <span class="keywordflow">if</span> ((error = getType().check(*m_inputFile)) != <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5a69656f79342520e170ee22f4dfcb6d29">asagi::Grid::SUCCESS</a>)
<a name="l00247"></a>00247                 <span class="keywordflow">return</span> error;
<a name="l00248"></a>00248         
<a name="l00249"></a>00249         <span class="comment">// Init subclass</span>
<a name="l00250"></a>00250         error = init();
<a name="l00251"></a>00251         
<a name="l00252"></a>00252         <span class="keywordflow">if</span> (!keepFileOpen()) {
<a name="l00253"></a>00253                 <span class="comment">// input file no longer needed, so we close</span>
<a name="l00254"></a>00254                 <span class="keyword">delete</span> m_inputFile;
<a name="l00255"></a>00255                 m_inputFile = 0L;
<a name="l00256"></a>00256         }
<a name="l00257"></a>00257         
<a name="l00258"></a>00258         <span class="keywordflow">return</span> error;
<a name="l00259"></a>00259 }
<a name="l00260"></a>00260 
<a name="l00264"></a><a class="code" href="classgrid_1_1Grid.xhtml#a4344eef84e99cfe30b27941689b02334">00264</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> <a class="code" href="classgrid_1_1Grid.xhtml#a4344eef84e99cfe30b27941689b02334">grid::Grid::getByte</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z)
<a name="l00265"></a>00265 {
<a name="l00266"></a>00266         <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> buf;
<a name="l00267"></a>00267         getAt(&amp;buf, &amp;<a class="code" href="classtypes_1_1Type.xhtml#a87e5d324ff1adec8321c9f9eb432210c">types::Type::convertByte</a>, x, y, z);
<a name="l00268"></a>00268         
<a name="l00269"></a>00269         <span class="keywordflow">return</span> buf;
<a name="l00270"></a>00270 }
<a name="l00271"></a>00271 
<a name="l00275"></a><a class="code" href="classgrid_1_1Grid.xhtml#a6beae3dd742927aa6d9cd4bd962ff36b">00275</a> <span class="keywordtype">int</span> <a class="code" href="classgrid_1_1Grid.xhtml#a6beae3dd742927aa6d9cd4bd962ff36b">grid::Grid::getInt</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z)
<a name="l00276"></a>00276 {
<a name="l00277"></a>00277         <span class="keywordtype">int</span> buf;
<a name="l00278"></a>00278         getAt(&amp;buf, &amp;<a class="code" href="classtypes_1_1Type.xhtml#a517f284a29acc0b109ec2e66b571c256">types::Type::convertInt</a>, x, y, z);
<a name="l00279"></a>00279 
<a name="l00280"></a>00280         <span class="keywordflow">return</span> buf;
<a name="l00281"></a>00281 }
<a name="l00282"></a>00282 
<a name="l00286"></a><a class="code" href="classgrid_1_1Grid.xhtml#a5b3d1bd9bf3bd394d032c4a885860503">00286</a> <span class="keywordtype">long</span> <a class="code" href="classgrid_1_1Grid.xhtml#a5b3d1bd9bf3bd394d032c4a885860503">grid::Grid::getLong</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z)
<a name="l00287"></a>00287 {
<a name="l00288"></a>00288         <span class="keywordtype">long</span> buf;
<a name="l00289"></a>00289         getAt(&amp;buf, &amp;<a class="code" href="classtypes_1_1Type.xhtml#a44c9a8e17285f021b3839716e3ebccab">types::Type::convertLong</a>, x, y, z);
<a name="l00290"></a>00290 
<a name="l00291"></a>00291         <span class="keywordflow">return</span> buf;
<a name="l00292"></a>00292 }
<a name="l00293"></a>00293 
<a name="l00297"></a><a class="code" href="classgrid_1_1Grid.xhtml#af915b5a7a0b38154ba25d580039d82cb">00297</a> <span class="keywordtype">float</span> <a class="code" href="classgrid_1_1Grid.xhtml#af915b5a7a0b38154ba25d580039d82cb">grid::Grid::getFloat</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z)
<a name="l00298"></a>00298 {
<a name="l00299"></a>00299         <span class="keywordtype">float</span> buf;
<a name="l00300"></a>00300         getAt(&amp;buf, &amp;<a class="code" href="classtypes_1_1Type.xhtml#a5f68a2faa328fb6aa3c8fa988d0d5f5d">types::Type::convertFloat</a>, x, y, z);
<a name="l00301"></a>00301 
<a name="l00302"></a>00302         <span class="keywordflow">return</span> buf;
<a name="l00303"></a>00303 }
<a name="l00304"></a>00304 
<a name="l00308"></a><a class="code" href="classgrid_1_1Grid.xhtml#a70ed84eb06098e3e89866a2ca224191d">00308</a> <span class="keywordtype">double</span> <a class="code" href="classgrid_1_1Grid.xhtml#a70ed84eb06098e3e89866a2ca224191d">grid::Grid::getDouble</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z)
<a name="l00309"></a>00309 {
<a name="l00310"></a>00310         <span class="keywordtype">double</span> buf;
<a name="l00311"></a>00311         getAt(&amp;buf, &amp;<a class="code" href="classtypes_1_1Type.xhtml#a0b3e31075d03748dde43729d97026f22">types::Type::convertDouble</a>, x, y, z);
<a name="l00312"></a>00312 
<a name="l00313"></a>00313         <span class="keywordflow">return</span> buf;
<a name="l00314"></a>00314 }
<a name="l00315"></a>00315 
<a name="l00319"></a><a class="code" href="classgrid_1_1Grid.xhtml#adc031ce6e9a3043d08b56442308aa914">00319</a> <span class="keywordtype">void</span> <a class="code" href="classgrid_1_1Grid.xhtml#adc031ce6e9a3043d08b56442308aa914">grid::Grid::getBuf</a>(<span class="keywordtype">void</span>* buf, <span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z)
<a name="l00320"></a>00320 {
<a name="l00321"></a>00321         getAt(buf, &amp;<a class="code" href="classtypes_1_1Type.xhtml#aa6175ae25232824741aeffe8b91af55f">types::Type::convertBuffer</a>, x, y, z);
<a name="l00322"></a>00322 }
<a name="l00323"></a>00323 
<a name="l00327"></a><a class="code" href="classgrid_1_1Grid.xhtml#a7d208110e6e07b173ff9459b93188c9d">00327</a> <span class="keywordtype">bool</span> <a class="code" href="classgrid_1_1Grid.xhtml#a7d208110e6e07b173ff9459b93188c9d">grid::Grid::exportPng</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* filename)
<a name="l00328"></a>00328 {
<a name="l00329"></a>00329 <span class="preprocessor">#ifdef PNG_ENABLED</span>
<a name="l00330"></a>00330 <span class="preprocessor"></span>        <span class="keywordtype">float</span> min, max, value;
<a name="l00331"></a>00331         <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> red, green, blue;
<a name="l00332"></a>00332         
<a name="l00333"></a>00333         min = max = getAtFloat(0, 0);
<a name="l00334"></a>00334         <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> i = 0; i &lt; getXDim(); i++) {
<a name="l00335"></a>00335                 <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> j = 0; j &lt; getYDim(); j++) {
<a name="l00336"></a>00336                         value = getAtFloat(i, j);
<a name="l00337"></a>00337                         <span class="keywordflow">if</span> (value &lt; min)
<a name="l00338"></a>00338                                 min = value;
<a name="l00339"></a>00339                         <span class="keywordflow">if</span> (value &gt; max)
<a name="l00340"></a>00340                                 max = value;
<a name="l00341"></a>00341                 }
<a name="l00342"></a>00342         }
<a name="l00343"></a>00343         
<a name="l00344"></a>00344         <a class="code" href="classio_1_1PngWriter.xhtml">io::PngWriter</a> png(getXDim(), getYDim());
<a name="l00345"></a>00345         <span class="keywordflow">if</span> (!png.<a class="code" href="classio_1_1PngWriter.xhtml#ac3f065b6f2d4c14b9d6cd1aa94cb830f">create</a>(filename))
<a name="l00346"></a>00346                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00347"></a>00347         
<a name="l00348"></a>00348         <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> i = 0; i &lt; getXDim(); i++) {
<a name="l00349"></a>00349                 <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> j = 0; j &lt; getYDim(); j++) {
<a name="l00350"></a>00350                         <span class="comment">// do some magic here</span>
<a name="l00351"></a>00351                         h2rgb((getAtFloat(i, j) - min) / (max - min) * 2 / 3, red, green, blue);
<a name="l00352"></a>00352                         png.<a class="code" href="classio_1_1PngWriter.xhtml#ab152e1fe253d821ad8c7542348fbb0dd">write</a>(i, getYDim() - j - 1, red, green, blue);
<a name="l00353"></a>00353                 }
<a name="l00354"></a>00354         }
<a name="l00355"></a>00355         
<a name="l00356"></a>00356         png.<a class="code" href="classio_1_1PngWriter.xhtml#a3e5fc3a094950256e80b2760c6e3f30d">close</a>();
<a name="l00357"></a>00357         
<a name="l00358"></a>00358         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00359"></a>00359 <span class="preprocessor">#else // PNG_ENABLED</span>
<a name="l00360"></a>00360 <span class="preprocessor"></span>        <span class="comment">// TODO generate a warning or something like this</span>
<a name="l00361"></a>00361         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00362"></a>00362 <span class="preprocessor">#endif // PNG_ENABLED</span>
<a name="l00363"></a>00363 <span class="preprocessor"></span>}
<a name="l00364"></a>00364 
<a name="l00369"></a><a class="code" href="classgrid_1_1Grid.xhtml#a41c9023d8ef03d032a245ad9e18cc7da">00369</a> <span class="keywordtype">void</span> <a class="code" href="classgrid_1_1Grid.xhtml#a41c9023d8ef03d032a245ad9e18cc7da">grid::Grid::getAt</a>(<span class="keywordtype">void</span>* buf, <a class="code" href="classtypes_1_1Type.xhtml#affb393653b00d83221d8070473d3652a">types::Type::converter_t</a> converter,
<a name="l00370"></a>00370         <span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z)
<a name="l00371"></a>00371 {
<a name="l00372"></a>00372         x = round((x - m_offset[0]) * m_scalingInv[0]);
<a name="l00373"></a>00373         y = round((y - m_offset[1]) * m_scalingInv[1]);
<a name="l00374"></a>00374         z = round((z - m_offset[2]) * m_scalingInv[2]);
<a name="l00375"></a>00375 
<a name="l00376"></a>00376         assert(x &gt;= 0 &amp;&amp; x &lt; getXDim()
<a name="l00377"></a>00377                 &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; getYDim()
<a name="l00378"></a>00378                 &amp;&amp; z &gt;= 0 &amp;&amp; z &lt; getZDim());
<a name="l00379"></a>00379 
<a name="l00380"></a>00380         m_counter.inc(<a class="code" href="classperf_1_1Counter.xhtml#a19ab3ea97990707e1787a16dbc70790faf15235dd3cb411bf76cbfc929242e25b">perf::Counter::ACCESS</a>);
<a name="l00381"></a>00381 
<a name="l00382"></a>00382         getAt(buf, converter, static_cast&lt;unsigned long&gt;(x),
<a name="l00383"></a>00383                 static_cast&lt;unsigned long&gt;(y), static_cast&lt;unsigned long&gt;(z));
<a name="l00384"></a>00384 }
<a name="l00385"></a>00385 
<a name="l00386"></a><a class="code" href="classgrid_1_1Grid.xhtml#ab084e5713f396248b8a3d6e3fc511a95">00386</a> <span class="keywordtype">float</span> <a class="code" href="classgrid_1_1Grid.xhtml#ab084e5713f396248b8a3d6e3fc511a95">grid::Grid::getAtFloat</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> y)
<a name="l00387"></a>00387 {
<a name="l00388"></a>00388         <span class="keywordtype">float</span> buf;
<a name="l00389"></a>00389         
<a name="l00390"></a>00390         getAt(&amp;buf, &amp;<a class="code" href="classtypes_1_1Type.xhtml#a5f68a2faa328fb6aa3c8fa988d0d5f5d">types::Type::convertFloat</a>, x, y);
<a name="l00391"></a>00391         
<a name="l00392"></a>00392         <span class="keywordflow">return</span> buf;
<a name="l00393"></a>00393 }
<a name="l00394"></a>00394 
<a name="l00398"></a><a class="code" href="classgrid_1_1Grid.xhtml#ad966f9a74765f64092508d260d77343d">00398</a> <span class="keywordtype">void</span> <a class="code" href="classgrid_1_1Grid.xhtml#ad966f9a74765f64092508d260d77343d">grid::Grid::h2rgb</a>(<span class="keywordtype">float</span> h, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> &amp;red, <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> &amp;green,
<a name="l00399"></a>00399         <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> &amp;blue)
<a name="l00400"></a>00400 {
<a name="l00401"></a>00401         <span class="comment">// h from 0..1</span>
<a name="l00402"></a>00402         
<a name="l00403"></a>00403         h *= 6;
<a name="l00404"></a>00404         <span class="keywordtype">float</span> x = fmod(h, 2) - 1;
<a name="l00405"></a>00405         <span class="keywordflow">if</span> (x &lt; 0)
<a name="l00406"></a>00406                 x *= -1;
<a name="l00407"></a>00407         x = 1 - x;
<a name="l00408"></a>00408         
<a name="l00409"></a>00409         <span class="comment">// &lt;= checks are not 100% correct, it should be &lt;</span>
<a name="l00410"></a>00410         <span class="comment">// but it solves the &quot;largest-value&quot; issue</span>
<a name="l00411"></a>00411         <span class="keywordflow">if</span> (h &lt;= 1) {
<a name="l00412"></a>00412                 red = 255;
<a name="l00413"></a>00413                 green = x * 255;
<a name="l00414"></a>00414                 blue = 0;
<a name="l00415"></a>00415                 <span class="keywordflow">return</span>;
<a name="l00416"></a>00416         }
<a name="l00417"></a>00417         <span class="keywordflow">if</span> (h &lt;= 2) {
<a name="l00418"></a>00418                 red = x * 255;
<a name="l00419"></a>00419                 green = 255;
<a name="l00420"></a>00420                 blue = 0;
<a name="l00421"></a>00421                 <span class="keywordflow">return</span>;
<a name="l00422"></a>00422         }
<a name="l00423"></a>00423         <span class="keywordflow">if</span> (h &lt;= 3) {
<a name="l00424"></a>00424                 red = 0;
<a name="l00425"></a>00425                 green = 255;
<a name="l00426"></a>00426                 blue = x * 255;
<a name="l00427"></a>00427                 <span class="keywordflow">return</span>;
<a name="l00428"></a>00428         }
<a name="l00429"></a>00429         <span class="keywordflow">if</span> (h &lt;= 4) {
<a name="l00430"></a>00430                 red = 0;
<a name="l00431"></a>00431                 green = x * 255;
<a name="l00432"></a>00432                 blue = 255;
<a name="l00433"></a>00433                 <span class="keywordflow">return</span>;
<a name="l00434"></a>00434         }
<a name="l00435"></a>00435         <span class="keywordflow">if</span> (h &lt;= 5) {
<a name="l00436"></a>00436                 red = x * 255;
<a name="l00437"></a>00437                 green = 0;
<a name="l00438"></a>00438                 blue = 255;
<a name="l00439"></a>00439         }
<a name="l00440"></a>00440         <span class="comment">// h &lt; 6</span>
<a name="l00441"></a>00441         red = 255;
<a name="l00442"></a>00442         green = 0;
<a name="l00443"></a>00443         blue = x * 255;
<a name="l00444"></a>00444 }
<a name="l00445"></a>00445 
<a name="l00450"></a><a class="code" href="classgrid_1_1Grid.xhtml#a15956057108a8c336b1aa69c41126012">00450</a> <span class="keywordtype">double</span> <a class="code" href="classgrid_1_1Grid.xhtml#a15956057108a8c336b1aa69c41126012">grid::Grid::getInvScaling</a>(<span class="keywordtype">double</span> scaling)
<a name="l00451"></a>00451 {
<a name="l00452"></a>00452         <span class="keywordflow">if</span> ((scaling == 0) || isinf(scaling))
<a name="l00453"></a>00453                 <span class="keywordflow">return</span> 0;
<a name="l00454"></a>00454         
<a name="l00455"></a>00455         <span class="keywordflow">return</span> 1/scaling;
<a name="l00456"></a>00456 }
<a name="l00457"></a>00457 
<a name="l00461"></a><a class="code" href="classgrid_1_1Grid.xhtml#a203e538490b9ab375b063f0b1dcc1156">00461</a> <span class="keywordtype">double</span> <a class="code" href="classgrid_1_1Grid.xhtml#a203e538490b9ab375b063f0b1dcc1156">grid::Grid::round</a>(<span class="keywordtype">double</span> value)
<a name="l00462"></a>00462 {
<a name="l00463"></a>00463         <span class="keywordflow">return</span> floor(value + 0.5);
<a name="l00464"></a>00464 }
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
