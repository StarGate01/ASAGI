<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>ASAGI: grid/distcachegrid.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  <td id="projectlogo"><img alt="Logo" src="asagi.png"/></td>
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">ASAGI
   &#160;<span id="projectnumber">0.4</span>
   </div>
   <div id="projectbrief">a pArallel Server for Adaptive GeoInformation</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">grid/distcachegrid.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="distcachegrid_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="distcachegrid_8h.xhtml">distcachegrid.h</a>&quot;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="mpiallocator_8h.xhtml">allocator/mpiallocator.h</a>&quot;</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;cstring&gt;</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &lt;cstdlib&gt;</span>
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;time.h&gt;</span>
<a name="l00045"></a>00045 
<a name="l00053"></a><a class="code" href="classgrid_1_1DistCacheGrid.xhtml#ad89c75256d00cff6a16d4acb94c66abd">00053</a> <a class="code" href="classgrid_1_1DistCacheGrid.xhtml#ad89c75256d00cff6a16d4acb94c66abd">grid::DistCacheGrid::DistCacheGrid</a>(<span class="keyword">const</span> <a class="code" href="classgrid_1_1GridContainer.xhtml">GridContainer</a>&amp; container,
<a name="l00054"></a>00054         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> hint, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keywordtype">id</span>)
<a name="l00055"></a>00055         : <a class="code" href="classgrid_1_1Grid.xhtml" title="Base class for a grid.">Grid</a>(container, hint),
<a name="l00056"></a>00056           <a class="code" href="classgrid_1_1LocalCacheGrid.xhtml">LocalCacheGrid</a>(container, hint,
<a name="l00057"></a>00057                           allocator::MPIAllocator&lt;unsigned char&gt;::allocator),
<a name="l00058"></a>00058           m_globalMutex(id)
<a name="l00059"></a>00059 {
<a name="l00060"></a>00060         <a class="code" href="classgrid_1_1DistCacheGrid.xhtml#a0d87e471f7b8aea46cbc6277ba638f2e">m_dictionary</a> = 0L;
<a name="l00061"></a>00061         <a class="code" href="classgrid_1_1DistCacheGrid.xhtml#adcdf5fd1eab132708c3b364b54cde6b1">m_dictEntries</a> = 2; <span class="comment">// default</span>
<a name="l00062"></a>00062         
<a name="l00063"></a>00063         <a class="code" href="classgrid_1_1DistCacheGrid.xhtml#a87548191be8d1c0f8f4a03404756bf8a">m_dataWin</a> = MPI_WIN_NULL;
<a name="l00064"></a>00064         <a class="code" href="classgrid_1_1DistCacheGrid.xhtml#a2972724171e9c5efb81bf14f00fbe773">m_dictWin</a> = MPI_WIN_NULL;
<a name="l00065"></a>00065 }
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 grid::DistCacheGrid::~DistCacheGrid()
<a name="l00068"></a>00068 {
<a name="l00069"></a>00069         <span class="keywordflow">if</span> (m_dataWin != MPI_WIN_NULL)
<a name="l00070"></a>00070                 MPI_Win_free(&amp;m_dataWin);
<a name="l00071"></a>00071         <span class="keywordflow">if</span> (m_dictWin != MPI_WIN_NULL)
<a name="l00072"></a>00072                 MPI_Win_free(&amp;m_dictWin);
<a name="l00073"></a>00073         
<a name="l00074"></a>00074         MPI_Free_mem(m_dictionary);
<a name="l00075"></a>00075 }
<a name="l00076"></a>00076 
<a name="l00077"></a><a class="code" href="classgrid_1_1DistCacheGrid.xhtml#a428e57e0dc72c1dcac0cf6ce00dd3d7d">00077</a> <a class="code" href="group__cxx__interface.xhtml#gac1191f4df7554b1b99e515962ebc2bb5">asagi::Grid::Error</a> <a class="code" href="classgrid_1_1DistCacheGrid.xhtml#a428e57e0dc72c1dcac0cf6ce00dd3d7d">grid::DistCacheGrid::init</a>()
<a name="l00078"></a>00078 {
<a name="l00079"></a>00079         <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> blockSize = getTotalBlockSize();
<a name="l00080"></a>00080         <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> dictCount = getLocalBlockCount();
<a name="l00081"></a>00081         <a class="code" href="group__cxx__interface.xhtml#gac1191f4df7554b1b99e515962ebc2bb5">asagi::Grid::Error</a> error;
<a name="l00082"></a>00082         
<a name="l00083"></a>00083         <span class="comment">// Dictionary</span>
<a name="l00084"></a>00084         <span class="keywordflow">if</span> (MPI_Alloc_mem(<span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) * getDictLength() *
<a name="l00085"></a>00085                 dictCount, MPI_INFO_NULL, &amp;m_dictionary) != MPI_SUCCESS)
<a name="l00086"></a>00086                 <span class="keywordflow">return</span> <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5ad70f0e05f5b076e8dd6bc5be37ab9f69">asagi::Grid::MPI_ERROR</a>;
<a name="l00087"></a>00087         
<a name="l00088"></a>00088         <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> i = 0; i &lt; dictCount; i++)
<a name="l00089"></a>00089                 m_dictionary[i * getDictLength()] = 0;
<a name="l00090"></a>00090         
<a name="l00091"></a>00091         <span class="keywordflow">if</span> (MPI_Win_create(m_dictionary,
<a name="l00092"></a>00092                 <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) * getDictLength() * dictCount,
<a name="l00093"></a>00093                 <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>),
<a name="l00094"></a>00094                 MPI_INFO_NULL,
<a name="l00095"></a>00095                 getMPICommunicator(),
<a name="l00096"></a>00096                 &amp;m_dictWin) != MPI_SUCCESS)
<a name="l00097"></a>00097                 <span class="keywordflow">return</span> <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5ad70f0e05f5b076e8dd6bc5be37ab9f69">asagi::Grid::MPI_ERROR</a>;
<a name="l00098"></a>00098         
<a name="l00099"></a>00099         <span class="comment">// Initialize the cache</span>
<a name="l00100"></a>00100         error = <a class="code" href="classgrid_1_1LocalCacheGrid.xhtml#a2eb4f2039fcd2b9fc347eedf837c447b">LocalCacheGrid::init</a>();
<a name="l00101"></a>00101         <span class="keywordflow">if</span> (error != <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5a69656f79342520e170ee22f4dfcb6d29">asagi::Grid::SUCCESS</a>)
<a name="l00102"></a>00102                 <span class="keywordflow">return</span> error;
<a name="l00103"></a>00103         
<a name="l00104"></a>00104         <span class="keywordflow">if</span> (MPI_Win_create(getCache(),
<a name="l00105"></a>00105                 getType().getSize() * blockSize * getBlocksPerNode(),
<a name="l00106"></a>00106                 getType().getSize(),
<a name="l00107"></a>00107                 MPI_INFO_NULL,
<a name="l00108"></a>00108                 getMPICommunicator(),
<a name="l00109"></a>00109                 &amp;m_dataWin) != MPI_SUCCESS)
<a name="l00110"></a>00110                 <span class="keywordflow">return</span> <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5ad70f0e05f5b076e8dd6bc5be37ab9f69">asagi::Grid::MPI_ERROR</a>;
<a name="l00111"></a>00111         
<a name="l00112"></a>00112         srand(time(0L));
<a name="l00113"></a>00113         
<a name="l00114"></a>00114         <span class="comment">// Init the global mutex</span>
<a name="l00115"></a>00115         <span class="keywordflow">return</span> m_globalMutex.init(getMPICommunicator());
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 
<a name="l00118"></a><a class="code" href="classgrid_1_1DistCacheGrid.xhtml#a9daa44f5f58c164ae2a536beb830d684">00118</a> <span class="keywordtype">void</span> <a class="code" href="classgrid_1_1DistCacheGrid.xhtml#a9daa44f5f58c164ae2a536beb830d684">grid::DistCacheGrid::getBlock</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> block,
<a name="l00119"></a>00119         <span class="keywordtype">long</span> oldBlock,
<a name="l00120"></a>00120         <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> cacheIndex,
<a name="l00121"></a>00121         <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *cache)
<a name="l00122"></a>00122 {
<a name="l00123"></a>00123         <span class="keywordtype">int</span> mpiResult; NDBG_UNUSED(mpiResult);
<a name="l00124"></a>00124 
<a name="l00125"></a>00125         <span class="comment">// Local buffer for a dict entry</span>
<a name="l00126"></a>00126         <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> *dictEntry = <span class="keyword">new</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>[getDictLength()];
<a name="l00127"></a>00127 
<a name="l00128"></a>00128         <span class="comment">// TODO Since we use the global mutex, it should be save to</span>
<a name="l00129"></a>00129         <span class="comment">// access all windows in shared mode. The global mutex makes</span>
<a name="l00130"></a>00130         <span class="comment">// sure we do not access the same block from different ranks</span>
<a name="l00131"></a>00131         <span class="comment">// at the same time. However, I&#39;m not sure about this.</span>
<a name="l00132"></a>00132 
<a name="l00133"></a>00133         <span class="keywordflow">if</span> (oldBlock &gt;= 0) {
<a name="l00134"></a>00134                 <span class="comment">// We need to propagate the information that we</span>
<a name="l00135"></a>00135                 <span class="comment">// no longer have the old block</span>
<a name="l00136"></a>00136                 
<a name="l00137"></a>00137                 <span class="keywordtype">int</span> oldDictRank = getBlockRank(oldBlock);
<a name="l00138"></a>00138                 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> oldDictOffset = getBlockOffset(oldBlock);
<a name="l00139"></a>00139                 
<a name="l00140"></a>00140                 m_globalMutex.acquire(oldBlock);
<a name="l00141"></a>00141                 
<a name="l00142"></a>00142                 <span class="keywordflow">if</span> (oldDictRank == getMPIRank()) {
<a name="l00143"></a>00143                         deleteBlockInfo(&amp;m_dictionary[oldDictOffset
<a name="l00144"></a>00144                                 * getDictLength()]);
<a name="l00145"></a>00145                 } <span class="keywordflow">else</span> {
<a name="l00146"></a>00146                         
<a name="l00147"></a>00147                         mpiResult = MPI_Win_lock(MPI_LOCK_SHARED, oldDictRank,
<a name="l00148"></a>00148                                 MPI_MODE_NOCHECK, m_dictWin);
<a name="l00149"></a>00149                         assert(mpiResult == MPI_SUCCESS);
<a name="l00150"></a>00150                         
<a name="l00151"></a>00151                         mpiResult = MPI_Get(dictEntry,
<a name="l00152"></a>00152                                 getDictLength(),
<a name="l00153"></a>00153                                 MPI_UNSIGNED_LONG,
<a name="l00154"></a>00154                                 oldDictRank,
<a name="l00155"></a>00155                                 oldDictOffset * getDictLength(),
<a name="l00156"></a>00156                                 getDictLength(),
<a name="l00157"></a>00157                                 MPI_UNSIGNED_LONG,
<a name="l00158"></a>00158                                 m_dictWin);
<a name="l00159"></a>00159                         assert(mpiResult == MPI_SUCCESS);
<a name="l00160"></a>00160 
<a name="l00161"></a>00161                         mpiResult = MPI_Win_unlock(oldDictRank, m_dictWin);
<a name="l00162"></a>00162                         assert(mpiResult == MPI_SUCCESS);
<a name="l00163"></a>00163                         
<a name="l00164"></a>00164                         deleteBlockInfo(dictEntry);
<a name="l00165"></a>00165                         
<a name="l00166"></a>00166                         mpiResult = MPI_Win_lock(MPI_LOCK_SHARED, oldDictRank,
<a name="l00167"></a>00167                                 MPI_MODE_NOCHECK, m_dictWin);
<a name="l00168"></a>00168                         assert(mpiResult == MPI_SUCCESS);
<a name="l00169"></a>00169 
<a name="l00170"></a>00170                         mpiResult = MPI_Put(dictEntry,
<a name="l00171"></a>00171                                 getDictLength(),
<a name="l00172"></a>00172                                 MPI_UNSIGNED_LONG,
<a name="l00173"></a>00173                                 oldDictRank,
<a name="l00174"></a>00174                                 oldDictOffset * getDictLength(),
<a name="l00175"></a>00175                                 getDictLength(),
<a name="l00176"></a>00176                                 MPI_UNSIGNED_LONG,
<a name="l00177"></a>00177                                 m_dictWin);
<a name="l00178"></a>00178                         
<a name="l00179"></a>00179                         mpiResult = MPI_Win_unlock(oldDictRank, m_dictWin);
<a name="l00180"></a>00180                         assert(mpiResult == MPI_SUCCESS);
<a name="l00181"></a>00181                 }
<a name="l00182"></a>00182                 
<a name="l00183"></a>00183                 m_globalMutex.release(oldBlock);
<a name="l00184"></a>00184         }
<a name="l00185"></a>00185 
<a name="l00186"></a>00186         <span class="comment">// Transfer the block and update the dictionary</span>
<a name="l00187"></a>00187         <span class="keywordtype">int</span> dictRank = getBlockRank(block), dataRank;
<a name="l00188"></a>00188         <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> dictOffset = getBlockOffset(block), dataOffset;
<a name="l00189"></a>00189 
<a name="l00190"></a>00190         m_globalMutex.acquire(block);
<a name="l00191"></a>00191 
<a name="l00192"></a>00192         <span class="keywordflow">if</span> (dictRank == getMPIRank()) {
<a name="l00193"></a>00193                 getBlockInfo(&amp;m_dictionary[dictOffset * getDictLength()],
<a name="l00194"></a>00194                         cacheIndex, dataRank, dataOffset);
<a name="l00195"></a>00195         } <span class="keywordflow">else</span> {
<a name="l00196"></a>00196                 mpiResult = MPI_Win_lock(MPI_LOCK_SHARED, dictRank,
<a name="l00197"></a>00197                         MPI_MODE_NOCHECK, m_dictWin);
<a name="l00198"></a>00198                 assert(mpiResult == MPI_SUCCESS);
<a name="l00199"></a>00199 
<a name="l00200"></a>00200                 mpiResult = MPI_Get(dictEntry,
<a name="l00201"></a>00201                         getDictLength(),
<a name="l00202"></a>00202                         MPI_UNSIGNED_LONG,
<a name="l00203"></a>00203                         dictRank,
<a name="l00204"></a>00204                         dictOffset * getDictLength(),
<a name="l00205"></a>00205                         getDictLength(),
<a name="l00206"></a>00206                         MPI_UNSIGNED_LONG,
<a name="l00207"></a>00207                         m_dictWin);
<a name="l00208"></a>00208                 assert(mpiResult == MPI_SUCCESS);
<a name="l00209"></a>00209 
<a name="l00210"></a>00210                 mpiResult = MPI_Win_unlock(dictRank, m_dictWin);
<a name="l00211"></a>00211                 assert(mpiResult == MPI_SUCCESS);
<a name="l00212"></a>00212 
<a name="l00213"></a>00213                 getBlockInfo(dictEntry, cacheIndex, dataRank, dataOffset);
<a name="l00214"></a>00214                 
<a name="l00215"></a>00215                 mpiResult = MPI_Win_lock(MPI_LOCK_SHARED, dictRank,
<a name="l00216"></a>00216                         MPI_MODE_NOCHECK, m_dictWin);
<a name="l00217"></a>00217                 assert(mpiResult == MPI_SUCCESS);
<a name="l00218"></a>00218 
<a name="l00219"></a>00219                 mpiResult = MPI_Put(dictEntry,
<a name="l00220"></a>00220                         getDictLength(),
<a name="l00221"></a>00221                         MPI_UNSIGNED_LONG,
<a name="l00222"></a>00222                         dictRank,
<a name="l00223"></a>00223                         dictOffset * getDictLength(),
<a name="l00224"></a>00224                         getDictLength(),
<a name="l00225"></a>00225                         MPI_UNSIGNED_LONG,
<a name="l00226"></a>00226                         m_dictWin);
<a name="l00227"></a>00227                 assert(mpiResult == MPI_SUCCESS);
<a name="l00228"></a>00228                 
<a name="l00229"></a>00229                 mpiResult = MPI_Win_unlock(dictRank, m_dictWin);
<a name="l00230"></a>00230                 assert(mpiResult == MPI_SUCCESS);
<a name="l00231"></a>00231         }
<a name="l00232"></a>00232 
<a name="l00233"></a>00233         <span class="keywordflow">if</span> (dataRank &lt; 0) {
<a name="l00234"></a>00234                 <span class="comment">// Load the block form the netcdf file</span>
<a name="l00235"></a>00235                 
<a name="l00236"></a>00236                 <a class="code" href="classgrid_1_1LocalCacheGrid.xhtml#a58e4f497f62e38cac3caf54cb99ffc38">LocalCacheGrid::getBlock</a>(block, oldBlock, cacheIndex, cache);
<a name="l00237"></a>00237         } <span class="keywordflow">else</span> {
<a name="l00238"></a>00238                 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> blockSize = getTotalBlockSize();
<a name="l00239"></a>00239 
<a name="l00240"></a>00240                 <span class="comment">// Transfer the block from the other rank</span>
<a name="l00241"></a>00241                 incCounter(<a class="code" href="classperf_1_1Counter.xhtml#a19ab3ea97990707e1787a16dbc70790fa44f028cb039c0f0d6921577a611a1b7a">perf::Counter::MPI</a>);
<a name="l00242"></a>00242                 
<a name="l00243"></a>00243                 <span class="comment">// Lock remote window</span>
<a name="l00244"></a>00244                 mpiResult = MPI_Win_lock(MPI_LOCK_SHARED, dataRank,
<a name="l00245"></a>00245                         MPI_MODE_NOCHECK, m_dataWin);
<a name="l00246"></a>00246                 assert(mpiResult == MPI_SUCCESS);
<a name="l00247"></a>00247 
<a name="l00248"></a>00248                 <span class="comment">// Transfer data</span>
<a name="l00249"></a>00249                 mpiResult = MPI_Get(cache,
<a name="l00250"></a>00250                         blockSize,
<a name="l00251"></a>00251                         getType().getMPIType(),
<a name="l00252"></a>00252                         dataRank,
<a name="l00253"></a>00253                         dataOffset * blockSize,
<a name="l00254"></a>00254                         blockSize,
<a name="l00255"></a>00255                         getType().getMPIType(),
<a name="l00256"></a>00256                         m_dataWin);
<a name="l00257"></a>00257                 assert(mpiResult == MPI_SUCCESS);
<a name="l00258"></a>00258 
<a name="l00259"></a>00259                 <span class="comment">// Unlock remote window</span>
<a name="l00260"></a>00260                 mpiResult = MPI_Win_unlock(dataRank, m_dataWin);
<a name="l00261"></a>00261                 assert(mpiResult == MPI_SUCCESS);
<a name="l00262"></a>00262         }
<a name="l00263"></a>00263         
<a name="l00264"></a>00264         m_globalMutex.release(block);
<a name="l00265"></a>00265 
<a name="l00266"></a>00266         <span class="keyword">delete</span> [] dictEntry;
<a name="l00267"></a>00267 }
<a name="l00268"></a>00268 
<a name="l00278"></a><a class="code" href="classgrid_1_1DistCacheGrid.xhtml#a9e100f643f73f772993d9ea5d8fafea9">00278</a> <span class="keywordtype">void</span> <a class="code" href="classgrid_1_1DistCacheGrid.xhtml#a9e100f643f73f772993d9ea5d8fafea9">grid::DistCacheGrid::getBlockInfo</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>* dictEntry, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> localOffset,
<a name="l00279"></a>00279         <span class="keywordtype">int</span> &amp;rank, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> &amp;offset)
<a name="l00280"></a>00280 {
<a name="l00281"></a>00281         <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> pos; <span class="comment">// Position in the list, we will use</span>
<a name="l00282"></a>00282         
<a name="l00283"></a>00283         <span class="keywordflow">if</span> (dictEntry[0] == 0) {
<a name="l00284"></a>00284                 <span class="comment">// Not (yet) in memory</span>
<a name="l00285"></a>00285                 rank = -1;
<a name="l00286"></a>00286         } <span class="keywordflow">else</span> {
<a name="l00287"></a>00287                 pos = rand() % dictEntry[0]; <span class="comment">// Use modulo since it is fast and random enough</span>
<a name="l00288"></a>00288                 rank = dictEntry[pos*2 + 1];
<a name="l00289"></a>00289                 offset = dictEntry[pos*2 + 2];
<a name="l00290"></a>00290         }
<a name="l00291"></a>00291         
<a name="l00292"></a>00292         <span class="keywordflow">if</span> (dictEntry[0] &gt;= m_dictEntries) {
<a name="l00293"></a>00293                 <span class="comment">// Dictionary full, delete oldest and shuffle the rest up</span>
<a name="l00294"></a>00294                 
<a name="l00295"></a>00295                 memcpy(&amp;dictEntry[1], &amp;dictEntry[3],
<a name="l00296"></a>00296                         <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) * 2 * (m_dictEntries - 1));
<a name="l00297"></a>00297                         
<a name="l00298"></a>00298                 dictEntry[0]--;
<a name="l00299"></a>00299         }
<a name="l00300"></a>00300         
<a name="l00301"></a>00301         dictEntry[dictEntry[0]*2 + 1] = getMPIRank();
<a name="l00302"></a>00302         dictEntry[dictEntry[0]*2 + 2] = localOffset;
<a name="l00303"></a>00303         dictEntry[0]++;
<a name="l00304"></a>00304 }
<a name="l00305"></a>00305 
<a name="l00309"></a><a class="code" href="classgrid_1_1DistCacheGrid.xhtml#a405f6c35311bf03249184743939248d0">00309</a> <span class="keywordtype">void</span> <a class="code" href="classgrid_1_1DistCacheGrid.xhtml#a405f6c35311bf03249184743939248d0">grid::DistCacheGrid::deleteBlockInfo</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>* dictEntry)
<a name="l00310"></a>00310 {
<a name="l00311"></a>00311         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;
<a name="l00312"></a>00312         
<a name="l00313"></a>00313         <span class="keywordflow">for</span> (i = 0; i &lt; dictEntry[0]; i++) {
<a name="l00314"></a>00314                 <span class="keywordflow">if</span> (dictEntry[i*2 + 1] == static_cast&lt;unsigned int&gt;(getMPIRank())) {
<a name="l00315"></a>00315                         memcpy(&amp;dictEntry[i*2 + 1], &amp;dictEntry[(i+1)*2 + 1],
<a name="l00316"></a>00316                                 <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>) * 2 * (dictEntry[0] - i - 1));
<a name="l00317"></a>00317                         <span class="keywordflow">break</span>;
<a name="l00318"></a>00318                 }
<a name="l00319"></a>00319         }
<a name="l00320"></a>00320         
<a name="l00321"></a>00321         <span class="keywordflow">if</span> (i &lt; dictEntry[0])
<a name="l00322"></a>00322                 <span class="comment">// Only substract the entry, if we have found it</span>
<a name="l00323"></a>00323                 dictEntry[0]--;
<a name="l00324"></a>00324 }
<a name="l00325"></a>00325 
<a name="l00329"></a><a class="code" href="classgrid_1_1DistCacheGrid.xhtml#a7b18db4544ecd38ba5886be2e91b93af">00329</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="classgrid_1_1DistCacheGrid.xhtml#a7b18db4544ecd38ba5886be2e91b93af">grid::DistCacheGrid::getDictLength</a>()
<a name="l00330"></a>00330 {
<a name="l00331"></a>00331         <span class="keywordflow">return</span> m_dictEntries * 2 + 1;
<a name="l00332"></a>00332 }
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
