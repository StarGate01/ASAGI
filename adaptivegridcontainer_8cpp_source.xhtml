<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>ASAGI: grid/adaptivegridcontainer.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />

<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>

</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  <td id="projectlogo"><img alt="Logo" src="asagi.png"/></td>
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">ASAGI
   &#160;<span id="projectnumber">0.3</span>
   </div>
   <div id="projectbrief">a pArallel Server for Adaptive GeoInformation</div>
  </td>
  
  
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<div class="title">grid/adaptivegridcontainer.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="adaptivegridcontainer_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00038"></a>00038 <span class="preprocessor">#include &quot;<a class="code" href="adaptivegridcontainer_8h.xhtml">adaptivegridcontainer.h</a>&quot;</span>
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;<a class="code" href="grid_8h.xhtml">grid/grid.h</a>&quot;</span>
<a name="l00041"></a>00041 
<a name="l00045"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a7c98dbd7a8009d64398ea6f4df42e304">00045</a> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a7c98dbd7a8009d64398ea6f4df42e304">grid::AdaptiveGridContainer::AdaptiveGridContainer</a>(<a class="code" href="group__cxx__interface.xhtml#ga26042863b1e4f739f16b0cdbe5639d9b">asagi::Grid::Type</a> type,
<a name="l00046"></a>00046         <span class="keywordtype">bool</span> isArray, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> hint, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> levels)
<a name="l00047"></a>00047         : <a class="code" href="classgrid_1_1GridContainer.xhtml">GridContainer</a>(type, isArray, hint, levels),
<a name="l00048"></a>00048         m_hint(hint)
<a name="l00049"></a>00049 {
<a name="l00050"></a>00050         <span class="comment">// Fancy way to allocate an array without default constructor</span>
<a name="l00051"></a>00051         <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a0ad3e0992df1d262306e6c90911703f1">m_grids</a> = <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#ac0d5dbb9c60d836f9aee504f86db7583">multiGridAllocator</a>.allocate(<a class="code" href="classgrid_1_1GridContainer.xhtml#a9bf00e25b72253ffa35d8762e3461285">m_levels</a>);
<a name="l00052"></a>00052         <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classgrid_1_1GridContainer.xhtml#a9bf00e25b72253ffa35d8762e3461285">m_levels</a>; i++)
<a name="l00053"></a>00053                 <span class="keyword">new</span>(<a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a0ad3e0992df1d262306e6c90911703f1">m_grids</a>+i) <a class="code" href="classgrid_1_1MultiGrid.xhtml">MultiGrid</a>(*<span class="keyword">this</span>);
<a name="l00054"></a>00054         <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a0ad3e0992df1d262306e6c90911703f1">m_grids</a>[0].<a class="code" href="classgrid_1_1MultiGrid.xhtml#a08ace5c9e59609a671e9fb3d35213fdd">setTopLevel</a>();
<a name="l00055"></a>00055         
<a name="l00056"></a>00056         <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a992d74dc4f4e476cfb37534989251964">m_ids</a> = 0;
<a name="l00057"></a>00057 }
<a name="l00058"></a>00058 
<a name="l00062"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a323c2b8d0067d26868e38ca190634c5f">00062</a> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a7c98dbd7a8009d64398ea6f4df42e304">grid::AdaptiveGridContainer::AdaptiveGridContainer</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> count,
<a name="l00063"></a>00063                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> blockLength[],
<a name="l00064"></a>00064                 <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> displacements[],
<a name="l00065"></a>00065                 <a class="code" href="group__cxx__interface.xhtml#ga26042863b1e4f739f16b0cdbe5639d9b">asagi::Grid::Type</a> types[],
<a name="l00066"></a>00066                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> hint, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> levels)
<a name="l00067"></a>00067         : <a class="code" href="classgrid_1_1GridContainer.xhtml">GridContainer</a>(count, blockLength, displacements, types, hint, levels),
<a name="l00068"></a>00068         m_hint(hint)
<a name="l00069"></a>00069 {
<a name="l00070"></a>00070         <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a0ad3e0992df1d262306e6c90911703f1">m_grids</a> = <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#ac0d5dbb9c60d836f9aee504f86db7583">multiGridAllocator</a>.allocate(<a class="code" href="classgrid_1_1GridContainer.xhtml#a9bf00e25b72253ffa35d8762e3461285">m_levels</a>);
<a name="l00071"></a>00071         <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classgrid_1_1GridContainer.xhtml#a9bf00e25b72253ffa35d8762e3461285">m_levels</a>; i++)
<a name="l00072"></a>00072                 <span class="keyword">new</span>(<a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a0ad3e0992df1d262306e6c90911703f1">m_grids</a>+i) <a class="code" href="classgrid_1_1MultiGrid.xhtml">MultiGrid</a>(*<span class="keyword">this</span>);
<a name="l00073"></a>00073         <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a0ad3e0992df1d262306e6c90911703f1">m_grids</a>[0].<a class="code" href="classgrid_1_1MultiGrid.xhtml#a08ace5c9e59609a671e9fb3d35213fdd">setTopLevel</a>();
<a name="l00074"></a>00074         
<a name="l00075"></a>00075         <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a992d74dc4f4e476cfb37534989251964">m_ids</a> = 0;
<a name="l00076"></a>00076 }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 grid::AdaptiveGridContainer::~AdaptiveGridContainer()
<a name="l00080"></a>00080 {
<a name="l00081"></a>00081         <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; m_levels; i++)
<a name="l00082"></a>00082                 multiGridAllocator.destroy(&amp;m_grids[i]);
<a name="l00083"></a>00083         multiGridAllocator.deallocate(m_grids, m_levels);
<a name="l00084"></a>00084 }
<a name="l00085"></a>00085 
<a name="l00086"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a94689339f9b7a2c8f162baeca42b5e9c">00086</a> <a class="code" href="group__cxx__interface.xhtml#gac1191f4df7554b1b99e515962ebc2bb5">asagi::Grid::Error</a> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a94689339f9b7a2c8f162baeca42b5e9c" title="Changes a grid parameter.">grid::AdaptiveGridContainer::setParam</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name,
<a name="l00087"></a>00087         <span class="keyword">const</span> <span class="keywordtype">char</span>* value, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> level)
<a name="l00088"></a>00088 {
<a name="l00089"></a>00089         <a class="code" href="group__cxx__interface.xhtml#gac1191f4df7554b1b99e515962ebc2bb5">Error</a> result;
<a name="l00090"></a>00090 
<a name="l00091"></a>00091         result = <a class="code" href="classgrid_1_1GridContainer.xhtml#af036ea9841472537db66c2367d264a4c" title="Changes a grid parameter.">GridContainer::setParam</a>(name, value, level);
<a name="l00092"></a>00092         <span class="keywordflow">if</span> (result != UNKNOWN_PARAM)
<a name="l00093"></a>00093                 <span class="keywordflow">return</span> result;
<a name="l00094"></a>00094 
<a name="l00095"></a>00095         assert(level &lt; m_levels);
<a name="l00096"></a>00096         <span class="keywordflow">return</span> m_grids[level].setParam(name, value);
<a name="l00097"></a>00097 }
<a name="l00098"></a>00098 
<a name="l00099"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a440ecb12f87f384976337fe5908b7257">00099</a> <a class="code" href="group__cxx__interface.xhtml#gac1191f4df7554b1b99e515962ebc2bb5">asagi::Grid::Error</a> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a440ecb12f87f384976337fe5908b7257">grid::AdaptiveGridContainer::open</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* filename,
<a name="l00100"></a>00100         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> level)
<a name="l00101"></a>00101 {
<a name="l00102"></a>00102         <a class="code" href="group__cxx__interface.xhtml#gac1191f4df7554b1b99e515962ebc2bb5">Error</a> result;
<a name="l00103"></a>00103         
<a name="l00104"></a>00104         result = <a class="code" href="classgrid_1_1GridContainer.xhtml#a420af1a72437d081b47bdbae44a857f7">GridContainer::open</a>(filename, level);
<a name="l00105"></a>00105         <span class="keywordflow">if</span> (result != SUCCESS)
<a name="l00106"></a>00106                 <span class="keywordflow">return</span> result;
<a name="l00107"></a>00107 
<a name="l00108"></a>00108         result = m_grids[level].open(filename);
<a name="l00109"></a>00109         <span class="keywordflow">if</span> (result != SUCCESS)
<a name="l00110"></a>00110                 <span class="keywordflow">return</span> result;
<a name="l00111"></a>00111         
<a name="l00112"></a>00112         <span class="keywordflow">if</span> (level == 0) {
<a name="l00113"></a>00113                 <span class="comment">// Set min/max from level 0 grid</span>
<a name="l00114"></a>00114                 m_minX = m_grids[0].getGrid(0)-&gt;getXMin();
<a name="l00115"></a>00115                 m_minY = m_grids[0].getGrid(0)-&gt;getYMin();
<a name="l00116"></a>00116                 m_minZ = m_grids[0].getGrid(0)-&gt;getZMin();
<a name="l00117"></a>00117                 
<a name="l00118"></a>00118                 m_maxX = m_grids[0].getGrid(0)-&gt;getXMax();
<a name="l00119"></a>00119                 m_maxY = m_grids[0].getGrid(0)-&gt;getYMax();
<a name="l00120"></a>00120                 m_maxZ = m_grids[0].getGrid(0)-&gt;getZMax();
<a name="l00121"></a>00121         }
<a name="l00122"></a>00122         
<a name="l00123"></a>00123         <span class="keywordflow">return</span> SUCCESS;
<a name="l00124"></a>00124 }
<a name="l00125"></a>00125 
<a name="l00126"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#af67631abd182216535afc5894a0fa7ee">00126</a> <span class="keywordtype">double</span> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#af67631abd182216535afc5894a0fa7ee">grid::AdaptiveGridContainer::getXDelta</a>()<span class="keyword"> const</span>
<a name="l00127"></a>00127 <span class="keyword"></span>{
<a name="l00128"></a>00128         <span class="keywordflow">return</span> m_grids-&gt;back()-&gt;getXDelta();
<a name="l00129"></a>00129 }
<a name="l00130"></a>00130 
<a name="l00131"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a961eb45a18fe39e4ff509837c1f22644">00131</a> <span class="keywordtype">double</span> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a961eb45a18fe39e4ff509837c1f22644">grid::AdaptiveGridContainer::getYDelta</a>()<span class="keyword"> const</span>
<a name="l00132"></a>00132 <span class="keyword"></span>{
<a name="l00133"></a>00133         <span class="keywordflow">return</span> m_grids-&gt;back()-&gt;getXDelta();
<a name="l00134"></a>00134 }
<a name="l00135"></a>00135 
<a name="l00136"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#abb89adac30a5d9d1442f5e0ffdc8ec6f">00136</a> <span class="keywordtype">double</span> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#abb89adac30a5d9d1442f5e0ffdc8ec6f">grid::AdaptiveGridContainer::getZDelta</a>()<span class="keyword"> const</span>
<a name="l00137"></a>00137 <span class="keyword"></span>{
<a name="l00138"></a>00138         <span class="keywordflow">return</span> m_grids-&gt;back()-&gt;getXDelta();
<a name="l00139"></a>00139 }
<a name="l00140"></a>00140 
<a name="l00141"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a4d910a62b2151ea94b0ffb57b2e0566d">00141</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a4d910a62b2151ea94b0ffb57b2e0566d">grid::AdaptiveGridContainer::getByte3D</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> level)
<a name="l00142"></a>00142 {
<a name="l00143"></a>00143         <span class="keywordflow">return</span> getGrid(x, y, z, level)-&gt;getByte(x, y, z);
<a name="l00144"></a>00144 }
<a name="l00145"></a>00145 
<a name="l00146"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#af1f337ad1fe15fc31aad3d78f4348c8f">00146</a> <span class="keywordtype">int</span> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#af1f337ad1fe15fc31aad3d78f4348c8f">grid::AdaptiveGridContainer::getInt3D</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> level)
<a name="l00147"></a>00147 {
<a name="l00148"></a>00148         <span class="keywordflow">return</span> getGrid(x, y, z, level)-&gt;getInt(x, y, z);
<a name="l00149"></a>00149 }
<a name="l00150"></a>00150 
<a name="l00151"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#aff8e381cc3b3ce1f8b51eac4e29630e2">00151</a> <span class="keywordtype">long</span> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#aff8e381cc3b3ce1f8b51eac4e29630e2">grid::AdaptiveGridContainer::getLong3D</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z,
<a name="l00152"></a>00152         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> level)
<a name="l00153"></a>00153 {
<a name="l00154"></a>00154         <span class="keywordflow">return</span> getGrid(x, y, z, level)-&gt;getLong(x, y, z);
<a name="l00155"></a>00155 }
<a name="l00156"></a>00156 
<a name="l00157"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a44e0db5e7e64a3c6861a02e80adc984d">00157</a> <span class="keywordtype">float</span> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a44e0db5e7e64a3c6861a02e80adc984d">grid::AdaptiveGridContainer::getFloat3D</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z,
<a name="l00158"></a>00158         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> level)
<a name="l00159"></a>00159 {
<a name="l00160"></a>00160         <span class="keywordflow">return</span> getGrid(x, y, z, level)-&gt;getFloat(x, y, z);
<a name="l00161"></a>00161 }
<a name="l00162"></a>00162 
<a name="l00163"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#aa0e8610e25cf4e77b3b4df74eb5723f3">00163</a> <span class="keywordtype">double</span> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#aa0e8610e25cf4e77b3b4df74eb5723f3">grid::AdaptiveGridContainer::getDouble3D</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z,
<a name="l00164"></a>00164         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> level)
<a name="l00165"></a>00165 {
<a name="l00166"></a>00166         <span class="keywordflow">return</span> getGrid(x, y, z, level)-&gt;getDouble(x, y, z);
<a name="l00167"></a>00167 }
<a name="l00168"></a>00168 
<a name="l00169"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a7df256cfb3abdc8c44cba943c12fa11d">00169</a> <span class="keywordtype">void</span> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a7df256cfb3abdc8c44cba943c12fa11d">grid::AdaptiveGridContainer::getBuf3D</a>(<span class="keywordtype">void</span>* buf, <span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z,
<a name="l00170"></a>00170         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> level)
<a name="l00171"></a>00171 {
<a name="l00172"></a>00172         getGrid(x, y, z, level)-&gt;getBuf(buf, x, y, z);
<a name="l00173"></a>00173 }
<a name="l00174"></a>00174 
<a name="l00175"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#abb66f588f9a4c82d7220df04cc554848">00175</a> <span class="keywordtype">bool</span> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#abb66f588f9a4c82d7220df04cc554848">grid::AdaptiveGridContainer::exportPng</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* filename, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> level)
<a name="l00176"></a>00176 {
<a name="l00177"></a>00177         assert(level &lt; m_levels);
<a name="l00178"></a>00178         
<a name="l00179"></a>00179         <span class="keywordflow">if</span> (level != 0)
<a name="l00180"></a>00180                 <span class="comment">// Sry, but we can not export subgrids ...</span>
<a name="l00181"></a>00181                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00182"></a>00182         
<a name="l00183"></a>00183         <span class="keywordflow">return</span> m_grids[0].getGrid(0)-&gt;exportPng(filename);
<a name="l00184"></a>00184 }
<a name="l00185"></a>00185 
<a name="l00186"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a611e5742f9a57ed7894da1773a5f0df3">00186</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a611e5742f9a57ed7894da1773a5f0df3">grid::AdaptiveGridContainer::getCounter</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* name, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> level)
<a name="l00187"></a>00187 {
<a name="l00188"></a>00188         assert(level &lt; m_levels);
<a name="l00189"></a>00189 
<a name="l00190"></a>00190         std::vector&lt;grid::Grid*&gt;::const_iterator grid;
<a name="l00191"></a>00191         <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> counter = 0;
<a name="l00192"></a>00192 
<a name="l00193"></a>00193         <span class="keywordflow">for</span> (grid = m_grids[level].begin(); grid &lt; m_grids[level].end(); grid++)
<a name="l00194"></a>00194                 counter += (*grid)-&gt;getCounter(name);
<a name="l00195"></a>00195 
<a name="l00196"></a>00196         <span class="keywordflow">return</span> counter;
<a name="l00197"></a>00197 }
<a name="l00198"></a>00198 
<a name="l00203"></a><a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a25c1c89786c24bc7ca8c9dabfe7773c3">00203</a> <a class="code" href="classgrid_1_1Grid.xhtml" title="Base class for a grid.">grid::Grid</a>* <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#a25c1c89786c24bc7ca8c9dabfe7773c3">grid::AdaptiveGridContainer::getGrid</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z,
<a name="l00204"></a>00204         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> level)
<a name="l00205"></a>00205 {
<a name="l00206"></a>00206         std::vector&lt;grid::Grid*&gt;::const_iterator grid;
<a name="l00207"></a>00207         
<a name="l00208"></a>00208         assert(level &lt; m_levels);
<a name="l00209"></a>00209         assert(m_minX &lt;= x &amp;&amp; m_maxX &gt;= x &amp;&amp; m_minY &lt;= y &amp;&amp; m_maxY &gt;= y
<a name="l00210"></a>00210                 &amp;&amp; m_minZ &lt;= z &amp;&amp; m_maxZ &gt;= z);
<a name="l00211"></a>00211         
<a name="l00212"></a>00212         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = level; i &gt; 0; i--) {
<a name="l00213"></a>00213                 <span class="keywordflow">for</span> (grid = m_grids[i].begin(); grid &lt; m_grids[i].end(); grid++) {
<a name="l00214"></a>00214                         <span class="keywordflow">if</span> ((*grid)-&gt;getXMin() &lt;= x &amp;&amp; (*grid)-&gt;getXMax() &gt;= x
<a name="l00215"></a>00215                                 &amp;&amp; (*grid)-&gt;getYMin() &lt;= x &amp;&amp; (*grid)-&gt;getYMax() &gt;= y
<a name="l00216"></a>00216                                 &amp;&amp; (*grid)-&gt;getXMin() &lt;= x &amp;&amp; (*grid)-&gt;getZMax() &gt;= z)
<a name="l00217"></a>00217                                 <span class="keywordflow">return</span> *grid;
<a name="l00218"></a>00218                 }
<a name="l00219"></a>00219         }
<a name="l00220"></a>00220         
<a name="l00221"></a>00221         <span class="keywordflow">return</span> m_grids[0].getGrid(0);
<a name="l00222"></a>00222 }
<a name="l00223"></a>00223 
<a name="l00228"></a>00228 std::allocator&lt;grid::MultiGrid&gt;
<a name="l00229"></a>00229         <a class="code" href="classgrid_1_1AdaptiveGridContainer.xhtml#ac0d5dbb9c60d836f9aee504f86db7583">grid::AdaptiveGridContainer::multiGridAllocator</a>;
</pre></div></div><!-- contents -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>



<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.7.6.1
</small></address>

</body>
</html>
