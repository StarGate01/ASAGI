<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.7"/>
<title>ASAGI: Using ASAGI</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="asagi.png"/></td>
  <td style="padding-left: 0.5em;">
   <div id="projectname">ASAGI
   &#160;<span id="projectnumber">1.0</span>
   </div>
   <div id="projectbrief">a pArallel Server for Adaptive GeoInformation</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.7 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li class="current"><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="index.xhtml">index</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Using ASAGI </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><h1><a class="anchor" id="minexamples"></a>
Minimal examples</h1>
<p>These are minimal C, C++ and Fortran examples that load a 2-dimensional grid and print the value at (0,0). In each case the grid contains floating point values.</p>
<p>C example: </p><div class="fragment"><div class="line"></div>
<div class="line"><span class="preprocessor">#include &lt;mpi.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="asagi_8h.xhtml">asagi.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> <a class="code" href="minimal_8c.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv)</div>
<div class="line">{</div>
<div class="line">  MPI_Init(&amp;argc, &amp;argv);</div>
<div class="line">  </div>
<div class="line">  <a class="code" href="classasagi_1_1Grid.xhtml">asagi_grid</a>* grid = <a class="code" href="group__c__interface.xhtml#ga85507eb7c2da8084b308bf2620cdeeb4">asagi_grid_create</a>(ASAGI_FLOAT);</div>
<div class="line">  <a class="code" href="group__c__interface.xhtml#gac1b330b0b69725c2ca539f9f4a23f3b7">asagi_grid_set_comm</a>(grid, MPI_COMM_WORLD);</div>
<div class="line">  <span class="comment">// with threads, set number of threads</span></div>
<div class="line">  <a class="code" href="group__c__interface.xhtml#ga6fff12023eb9b7384aa5c626893869c3">asagi_grid_set_threads</a>(grid, 1);</div>
<div class="line">  </div>
<div class="line">  <span class="keywordflow">if</span> (<a class="code" href="group__c__interface.xhtml#ga1668093ed7f9c92a634d594e088cf8ef">asagi_grid_open</a>(grid, <span class="stringliteral">&quot;/path/to/netcdf/file.nc&quot;</span>, 0) != ASAGI_SUCCESS) {</div>
<div class="line">    printf(<span class="stringliteral">&quot;Could not load file\n&quot;</span>);</div>
<div class="line">    <span class="keywordflow">return</span> 1;</div>
<div class="line">  }</div>
<div class="line">  </div>
<div class="line">  <span class="keywordtype">double</span> pos[] = {0, 0};</div>
<div class="line">  printf(<span class="stringliteral">&quot;Value at (0,0): %f\n&quot;</span>, <a class="code" href="group__c__interface.xhtml#ga390569d972d62ecddc808ae5a0b2d793">asagi_grid_get_float</a>(grid, pos, 0));</div>
<div class="line">  </div>
<div class="line">  <a class="code" href="group__c__interface.xhtml#ga4d7e60291ef33ea84718a500314063e6">asagi_grid_close</a>(grid);</div>
<div class="line">  </div>
<div class="line">  MPI_Finalize();</div>
<div class="line">  </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --><p>C++ example: </p><div class="fragment"><div class="line"></div>
<div class="line"><span class="preprocessor">#include &lt;mpi.h&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;<a class="code" href="asagi_8h.xhtml">asagi.h</a>&gt;</span></div>
<div class="line"><span class="preprocessor">#include &lt;iostream&gt;</span></div>
<div class="line"></div>
<div class="line"><span class="keyword">using namespace </span><a class="code" href="classasagi.xhtml">asagi</a>;</div>
<div class="line"></div>
<div class="line"><span class="keywordtype">int</span> <a class="code" href="minimal_8c.xhtml#a3c04138a5bfe5d72780bb7e82a18e627">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>** argv)</div>
<div class="line">{</div>
<div class="line">  MPI_Init(&amp;argc, &amp;argv);</div>
<div class="line">  </div>
<div class="line">  Grid* grid = <a class="code" href="group__cxx__interface.xhtml#ga4e784761804db6e37ef7b3f6e0892ece">Grid::create</a>();</div>
<div class="line">  grid-&gt;setComm(MPI_COMM_WORLD);</div>
<div class="line">  <span class="comment">// with threads, set number of threads</span></div>
<div class="line">  grid-&gt;setThreads(1);</div>
<div class="line">  </div>
<div class="line">  <span class="keywordflow">if</span> (grid-&gt;open(<span class="stringliteral">&quot;/path/to/netcdf/file.nc&quot;</span>) != <a class="code" href="group__cxx__interface.xhtml#ggac1191f4df7554b1b99e515962ebc2bb5a69656f79342520e170ee22f4dfcb6d29">Grid::SUCCESS</a>) {</div>
<div class="line">    std::cout &lt;&lt; <span class="stringliteral">&quot;Could not load file&quot;</span> &lt;&lt; std::endl;</div>
<div class="line">    <span class="keywordflow">return</span> 1;</div>
<div class="line">  }</div>
<div class="line">  </div>
<div class="line">  <span class="keywordtype">double</span> pos[] = {0, 0};</div>
<div class="line">  std::cout &lt;&lt; <span class="stringliteral">&quot;Value at (0,0): &quot;</span> &lt;&lt; grid-&gt;getFloat(pos) &lt;&lt; std::endl;</div>
<div class="line">  </div>
<div class="line">  <span class="comment">// The same as: &quot;Grid::close(grid);&quot;</span></div>
<div class="line">  <span class="keyword">delete</span> grid;</div>
<div class="line">  </div>
<div class="line">  MPI_Finalize();</div>
<div class="line">  </div>
<div class="line">  <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
</div><!-- fragment --><p>Fortran example: </p><div class="fragment"><div class="line"></div>
<div class="line"></div>
<div class="line"><span class="comment">! You have two options:</span></div>
<div class="line"><span class="comment">! - Include the module file _once_ in your project:</span></div>
<div class="line"><span class="comment">!include &#39;asagi.f90&#39;</span></div>
<div class="line"><span class="comment">! - Compile and link the module file as any other file in your project</span></div>
<div class="line"></div>
<div class="line"><span class="keyword">program</span> <a class="code" href="minimal_8f90.xhtml#af422c93c51401411d1e33902d33c0365">minimal</a></div>
<div class="line">  <span class="keywordtype">use </span>mpi</div>
<div class="line">  <span class="keywordtype">use </span><a class="code" href="classasagi.xhtml">asagi</a></div>
<div class="line">  use, <span class="keywordtype">intrinsic</span> :: iso_c_binding</div>
<div class="line">  <span class="keywordtype">implicit none</span></div>
<div class="line">  </div>
<div class="line">  <span class="keywordtype">integer</span> :: grid_id</div>
<div class="line">  <span class="keywordtype">real( kind=c_double )</span>, <span class="keywordtype">dimension(2)</span> :: pos</div>
<div class="line">  <span class="keywordtype">integer</span> :: error</div>
<div class="line"></div>
<div class="line">  call mpi_init( error )</div>
<div class="line">  </div>
<div class="line">  grid_id = <a class="code" href="group__c__interface.xhtml#ga85507eb7c2da8084b308bf2620cdeeb4">asagi_grid_create</a>( )</div>
<div class="line">  call <a class="code" href="group__c__interface.xhtml#gac1b330b0b69725c2ca539f9f4a23f3b7">asagi_grid_set_comm</a>( grid_id, mpi_comm_world )</div>
<div class="line">  <span class="comment">! with threads, set number of threads</span></div>
<div class="line">  call <a class="code" href="group__c__interface.xhtml#ga6fff12023eb9b7384aa5c626893869c3">asagi_grid_set_threads</a>( grid_id, 1 );</div>
<div class="line"></div>
<div class="line">  <span class="keywordflow">if</span>( <a class="code" href="group__c__interface.xhtml#ga1668093ed7f9c92a634d594e088cf8ef">asagi_grid_open</a>( grid_id, <span class="stringliteral">&quot;/path/to/netcdf/file.nc&quot;</span> ) /= asagi_success ) <span class="keywordflow">then</span></div>
<div class="line">    <span class="keyword">write</span> (*,*) <span class="stringliteral">&quot;Could not load file&quot;</span></div>
<div class="line">    call <span class="keywordflow">exit</span>(1)</div>
<div class="line">  <span class="keywordflow">end if</span></div>
<div class="line"></div>
<div class="line">  pos(:) = 0</div>
<div class="line">  <span class="keyword">write</span> (*,*) <span class="stringliteral">&quot;Value at (0,0):&quot;</span>, <a class="code" href="group__c__interface.xhtml#ga390569d972d62ecddc808ae5a0b2d793">asagi_grid_get_float</a>( grid_id, pos )</div>
<div class="line"></div>
<div class="line">  call <a class="code" href="group__c__interface.xhtml#ga4d7e60291ef33ea84718a500314063e6">asagi_grid_close</a>( grid_id )</div>
<div class="line"></div>
<div class="line">  call mpi_finalize( error )</div>
<div class="line"><span class="keyword">end program </span><a class="code" href="minimal_8f90.xhtml#af422c93c51401411d1e33902d33c0365">minimal</a></div>
</div><!-- fragment --><h1><a class="anchor" id="gridtypes"></a>
Grid types</h1>
<p>ASAGI distinguishes between three different grid types: </p><ul>
<li><b>FULL</b> The whole grid will be loaded during the initialization. The file is not accessed during runtime. (default) </li>
<li><b>CACHE</b> ASAGI is used as a cache. After initialization, the cache will be empty. Each access to an element, will put the corresponding block into the cache for later usage. </li>
<li><b>PASS-THROUGH</b> ASAGI will pass each access to the underlying file system without any caching, etc.</li>
</ul>
<p>Full storage does not automatically mean, that the full grid is stored on every CPU. If <a class="el" href="group__cxx__interface.xhtml#ga2d2df6432ce6afb767855ef3f575f85c">asagi::Grid::setComm()</a> and/or <a class="el" href="group__cxx__interface.xhtml#ga9c1e0182e9af11e8d0f14d96986de580">asagi::Grid::setThreads()</a> are called, the initial grid will be distributed among all nodes resp. CPUs. If the cache-grid is used and <a class="el" href="group__cxx__interface.xhtml#ga9c1e0182e9af11e8d0f14d96986de580">asagi::Grid::setThreads()</a> and/or <a class="el" href="group__cxx__interface.xhtml#ga2d2df6432ce6afb767855ef3f575f85c">asagi::Grid::setComm()</a> are set, ASAGI will copy the data from other NUMA domains and/or other MPI processes. Only if it is not available in another cache, the data will be fetched from the file.</p>
<h1><a class="anchor" id="Dimensions"></a>
Dimensions</h1>
<p>ASAGI supports grids with up to <code>MAX_DIMENSIONS</code> dimensions. (<code>MAX_DIMENSIONS</code> is 4 by default, but can be changed during compilation of ASAGI.) The number of actual dimensions in the grid cannot be specified by calling an ASAGI function but depends on the netCDF input file.</p>
<dl class="section remark"><dt>Remarks</dt><dd>The order in the dimension in the netCDF file is in Fortran style (column-major, see <a class="el" href="usage.xhtml#netcdffiles">NetCDF files</a>) but the ASAGI interface uses C/C++ ordering (row-major).</dd></dl>
<h1><a class="anchor" id="lod"></a>
Level of detail</h1>
<p>A grid can have multiple resolutions. Each resolution is identified by a level id (level of detail). If the number of levels is not specified when creating a grid, the grid will contain only one level of detail. In this case you can also omit the level id in all other functions, since level 0 will be used by default. (C does not support default arguments or overloading, therefore omitting arguments is not possible when using the C interface.)</p>
<p>For grids with multiple levels <a class="el" href="group__cxx__interface.xhtml#gab609e54ddac89b43ed5288f352fed556">asagi::Grid::open()</a> must be called once for each level. Several levels can be stored in a single NetCDF file with different variable names. (Use <a class="el" href="group__cxx__interface.xhtml#ga7079b291616d0ab9ffa5666ee5c25822">asagi::Grid::setParam()</a> to specify the variable name.) The coarsest resolution should have the level id 0. With ascending level id, the resolution should get finer. When accessing values with any <code>get</code> function, the level of detail can be selected with the last argument. The function <a class="el" href="group__cxx__interface.xhtml#gaa28e13bf58bc6dc2f86ea3f8c43047c6">asagi::Grid::close()</a> has to be called only once for the whole grid.</p>
<h1><a class="anchor" id="coordinatemapping"></a>
Coordinate mapping</h1>
<p>ASAGI distinguishes between actual coordinates and internal array indexes. All functions, that return a grid value, expect actual coordinates. ASAGI maps each coordinate to an array index using the coordinate variables from the NetCDF file (see section <a class="el" href="usage.xhtml#netcdffiles">NetCDF files</a> on how specify coordinate variables in NetCDF files). If no coordinate variable is available, the mapping is omitted. After the mapping, the coordinate is rounded to the nearest array index. ASAGI does not interpolate between array values.</p>
<p>The actual range of the grid can be obtained with <a class="el" href="group__cxx__interface.xhtml#ga55f03c25f353186444122c576e0f05c4">asagi::Grid::getMin()</a>/<a class="el" href="group__cxx__interface.xhtml#gada74d5b6aa2d5d93ef4ef012b4a80d18">asagi::Grid::getMax()</a>. They also return coordinates, not array indexes. It is erroneous to access values outside range of the grid.</p>
<p>The range of a dimension can be <img class="formulaInl" alt="$(-\infty,\infty)$" src="form_0.png"/>. This is the case if the size of the dimension in the netCDF file is one.</p>
<h1><a class="anchor" id="valuepos"></a>
Value position</h1>
<p>ASAGI supports cell-centered and vertex-centered grids. The value position can be switched with <a class="el" href="group__cxx__interface.xhtml#ga7079b291616d0ab9ffa5666ee5c25822">asagi::Grid::setParam()</a>.</p>
<div class="image">
<img src="valueposition.svg" alt="valueposition.svg"/>
<div class="caption">
Cell-centered and vertex-centered grids</div></div>
 <h1><a class="anchor" id="netcdffiles"></a>
NetCDF files</h1>
<p>All NetCDF files opened with ASAGI should respect the COARDS conventions (<a href="http://ferret.wrc.noaa.gov/noaa_coop/coop_cdf_profile.html">http://ferret.wrc.noaa.gov/noaa_coop/coop_cdf_profile.html</a>). However, ASAGI has some further limitations: </p><ul>
<li>The attributes <code>scale_factor</code> and <code>add_offset</code> are ignored. Besides conversion between data types, ASAGI does not modify the values. </li>
<li>Since ASAGI does not change the NetCDF file, all values have to be present in the file. Attributes, like <code>_FillValue</code> and <code>missing_value</code>, are not supported. </li>
<li>ASAGI is not aware of any units. It is up to the user of the library to interpret the values correctly. </li>
<li>Variables with more than three dimensions are not supported.</li>
</ul>
<p>It is possible to open a NetCDF file by different grids or levels at the same time. This allows you, for example, to store all levels of one grid in a single NetCDF file. In this case the levels must be distinguished by the variable names.</p>
<h1><a class="anchor" id="multithread"></a>
Multi-thread support</h1>
<p>When compiled with <code>THREADSAFE=ON</code> (see section <a class="el" href="build.xhtml#Compilation">Compilation</a>) all functions are thread-safe. However, there are some restrictions due to MPI implementations. If your MPI library is not thread-safe, you have to add the additional flag <code>THREADSAFE_MPI=ON</code> which will mare sure that ASAGI does not call MPI functions from different threads at the same time. However, in this case, you are not allowed to call MPI <b>and</b> ASAGI functions at the same time.</p>
<p>Multi-thread support is required if you want to use ASAGI's NUMA functionality (see <a class="el" href="usage.xhtml#NUMA">NUMA</a>).</p>
<p>In addition, for ASAGI to work correctly, it has to now about all threads the application is using. Use <a class="el" href="group__cxx__interface.xhtml#ga9c1e0182e9af11e8d0f14d96986de580">asagi::Grid::setThreads()</a> to set the number of threads and call <a class="el" href="group__cxx__interface.xhtml#gab609e54ddac89b43ed5288f352fed556">asagi::Grid::open()</a> from all threads. <a class="el" href="group__cxx__interface.xhtml#gab609e54ddac89b43ed5288f352fed556">asagi::Grid::open()</a> is a collective operation for all threads.</p>
<h1><a class="anchor" id="NUMA"></a>
NUMA</h1>
<p>ASAGI is able to detect the NUMA domains of your node. If more than one NUMA domain is detected, ASAGI will place a cache on each NUMA domain to increase locality. You can control the NUMA detection, with the configuration parameter <code>NUMA_COMMUNICATION</code> (see <a class="el" href="usage.xhtml#Parameters">Parameters</a>).</p>
<h2><a class="anchor" id="mpicommunication"></a>
MPI Communication</h2>
<p>ASAGI supports two different MPI communication patterns: Via MPI remote memory access (MPI windows) or a separate communication thread. The MPI windows are used by default since they do not have any special requirement and are easy to use. However, in some MPI libraries, RMA is poorly tested and does not work well, especially with hybrid parallelization.</p>
<p>Therefore, you can use the communication thread. In this mode, a separate thread is required which is responsible for answering remote requests. You have to start the thread with <a class="el" href="group__cxx__interface.xhtml#ga0aab15297b382bad7031937533af7974">asagi::Grid::startCommThread</a> <b>before</b> any grid using the communication thread is opened. Multiple grids will share one communication thread does you must not start more than communication. However, you have to make sure that the MPI communicator for the communication thread includes all grid communicators. Once the last grid using the communication thread is closed, you should stop the additional with <a class="el" href="group__cxx__interface.xhtml#ga91fcbf09ab71b095bbd7f8851af250b3">asagi::Grid::stopCommThread</a>. To use the communication thread it is also necessary to have a thread-safe MPI implementation.</p>
<p>To disable MPI communication completely, set <code>MPI_COMMUNICATION</code> to <code>OFF</code></p>
<h1><a class="anchor" id="Parameters"></a>
Parameters</h1>
<p>ASAGI supports several parameters for each grid:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Values </th><th>Description </th><th>Grid-global <a class="el" href="usage.xhtml#gridglobal">(*)</a>  </th></tr>
<tr>
<td>GRID </td><td>FULL | CACHE | PASS-THROUGH </td><td>The grid type (see <a class="el" href="usage.xhtml#gridtypes">Grid types</a>) </td><td>yes  </td></tr>
<tr>
<td>NUMA_COMMUNICATION </td><td>ON | OFF | CACHE </td><td>Enable/disable NUMA detection. <code>CACHE</code> can be used in combination with the "full grid". It enables NUMA detection and in addition ASAGI will look into all node local NUMA caches before activating MPI communication. (default: <code>ON</code> if compiled with NUMA support) </td><td>yes  </td></tr>
<tr>
<td>MPI_COMMUNICATION </td><td>OFF | THREAD | WINDOW </td><td>Use a communication thread or MPI RMA (windows) for MPI communication (default: WINDOW, see <a class="el" href="usage.xhtml#mpicommunication">MPI Communication</a>) </td><td>yes  </td></tr>
<tr>
<td>VALUE-POSITION </td><td>CELL-CENTERED | VERTEX-CENTERED </td><td>The value position (see <a class="el" href="usage.xhtml#valuepos">Value position</a>) </td><td>yes  </td></tr>
<tr>
<td>TIME-DIMENSION </td><td>int </td><td>The dimension that holds the time (default is -1 which means no time dimension exists). ASAGI treats time dimension specially. </td><td>yes  </td></tr>
<tr>
<td>VARIABLE </td><td>string </td><td>The variable name in the netCDf file. (default: z) </td><td>no  </td></tr>
<tr>
<td>BLOCK-SIZE-<em>X</em> </td><td>int </td><td>The size of a block in dimension <em>X</em>. Use a negative value to set the block size equal to the total number cells in this dimension. </td><td>no  </td></tr>
<tr>
<td>CACHE-SIZE </td><td>int </td><td>The size of the cache (in blocks) on each CPU. </td><td>no  </td></tr>
<tr>
<td>CACHE-HAND-SPREAD </td><td>int </td><td>ASAGI uses the clock algorithm to approx. LRU. This parameter specifies the difference of the 2 hands in the clock. Lower values result in a faster algorithm but a worse approximation. </td><td>no  </td></tr>
</table>
<p><a class="anchor" id="gridglobal"></a>(*) If yes, the parameter can only be set for all levels at the same time. Set the parameter <code>level</code> in <a class="el" href="group__cxx__interface.xhtml#ga7079b291616d0ab9ffa5666ee5c25822">asagi::Grid::setParam()</a> to 0 to change value.</p>
<h1><a class="anchor" id="accesscounter"></a>
Access counters</h1>
<p>ASAGI supports several access counters to measure the throughput of the library and get information about effectiveness of the caches:</p>
<table class="doxtable">
<tr>
<th>Name </th><th>Description  </th></tr>
<tr>
<td>accesses </td><td>Total number of data accesses  </td></tr>
<tr>
<td>numa_transfers </td><td>Number of blocks transfered between CPUs </td></tr>
<tr>
<td>mpi_transfers </td><td>Number of blocks transfered between processes  </td></tr>
<tr>
<td>file_load </td><td>Number of blocks loaded from file (after initialization)  </td></tr>
<tr>
<td>local_hits </td><td>Number values that where already in local NUMA domain  </td></tr>
<tr>
<td>node_hits </td><td>Number values that where already on the local node  </td></tr>
<tr>
<td>local_misses </td><td>Number of values that where not already in local memory  </td></tr>
</table>
<dl class="section remark"><dt>Remarks</dt><dd>If more than one thread is used and ASAGI is not compiled with <code>THREADSAFE_COUNTER=ON</code>, the counters might be inaccurate. </dd></dl>
</div></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.7
</small></address>
</body>
</html>
